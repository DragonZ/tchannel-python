# Copyright (c) 2015 Uber Technologies, Inc.
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
# THE SOFTWARE.

from __future__ import absolute_import

import inspect

from tornado import gen

from tchannel.tornado.broker import ArgSchemeBroker
from .scheme import ThriftArgScheme


def register(dispatcher, service_module, handler, service_name=None):
    """Registers the given service with the given dispatcher.

    .. code-block:: python

        # For,
        #
        #   service HelloWorld { string hello(1: string name); }

        import tchannel.thrift
        import HelloWorld

        class HelloWorldHandler(object):
            def hello(self, name):
                return "Hello, %s" % name

        dispatcher = RequestDispatcher()
        tchannel.thrift.register(dispatcher, HelloWorld, HelloWorldHandler())

    :param dispatcher:
        TChannel dispatcher with which the Thrift service will be registered.
    :param service_module:
        The service module generated by Thrift. This module contains the
        service ``Iface``, ``Client``, ``Processor``, etc. classes.
    :param handler:
        An object implementing the service interface.
    :param service_name:
        Thrift service name. This is the `service` name specified in the
        Thrift IDL. If omitted, it is automatically determined based on the
        name of ``service_module``.
    """
    assert handler, "hanlder can't be None"
    assert dispatcher, "dispatcher can't be None"
    assert service_module, "service_module can't be None"

    if not service_name:
        service_name = service_module.__name__.rsplit('.', 1)[-1]

    methods = [
        name for (name, _) in inspect.getmembers(
            service_module.Iface, predicate=inspect.ismethod
        )
    ]

    for method in methods:
        endpoint = "%s::%s" % (service_name, method)

        args_type = getattr(service_module, method + '_args')
        broker = ArgSchemeBroker(ThriftArgScheme(args_type))

        dispatcher.register(
            endpoint,
            build_handler(service_module, method, handler),
            broker,
        )


def build_handler(service_module, method_name, handler):
    result_type = getattr(service_module, method_name + '_result')
    handler_fn = getattr(handler, method_name)

    @gen.coroutine
    def thrift_handler(request, response, connection):
        call_args = yield request.get_body()
        args = [
            getattr(call_args, spec[2]) for spec in call_args.thrift_spec[1:]
        ]

        call_result = result_type()
        try:
            call_result.success = yield gen.maybe_future(handler_fn(*args))
        except Exception as exc:
            for spec in call_result.thrift_spec[1:]:
                if isinstance(exc, spec[3][0]):
                    setattr(call_result, spec[2], exc)
                    break
            else:
                raise

        response.write_header({})
        response.write_body(call_result)

    return thrift_handler
